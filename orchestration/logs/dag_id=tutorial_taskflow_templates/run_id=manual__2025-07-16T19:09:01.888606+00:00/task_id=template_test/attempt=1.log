{"timestamp":"2025-07-16T19:09:25.533320","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-16T19:09:25.538931","level":"info","event":"Filling up the DagBag from /home/airflow/.local/lib/python3.12/site-packages/airflow/example_dags/tutorial_taskflow_templates.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-16T19:09:29.249466Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.251233Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.252812Z","level":"info","event":"Current task name:template_test","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.255310Z","level":"info","event":"Dag name:tutorial_taskflow_templates","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.257070Z","level":"info","event":"sql: /*","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.258356Z","level":"info","event":" Licensed to the Apache Software Foundation (ASF) under one","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.260788Z","level":"info","event":" or more contributor license agreements.  See the NOTICE file","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.262861Z","level":"info","event":" distributed with this work for additional information","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.264772Z","level":"info","event":" regarding copyright ownership.  The ASF licenses this file","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.266217Z","level":"info","event":" to you under the Apache License, Version 2.0 (the","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.267478Z","level":"info","event":" \"License\"); you may not use this file except in compliance","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.269848Z","level":"info","event":" with the License.  You may obtain a copy of the License at","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.271270Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.273050Z","level":"info","event":"   http://www.apache.org/licenses/LICENSE-2.0","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.275530Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.278113Z","level":"info","event":" Unless required by applicable law or agreed to in writing,","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.280970Z","level":"info","event":" software distributed under the License is distributed on an","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.283084Z","level":"info","event":" \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.284372Z","level":"info","event":" KIND, either express or implied.  See the License for the","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.286521Z","level":"info","event":" specific language governing permissions and limitations","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.288526Z","level":"info","event":" under the License.","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.290139Z","level":"info","event":"*/","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.291420Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.293064Z","level":"info","event":"select * from test_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.294934Z","level":"info","event":"where 1=1","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.296534Z","level":"info","event":"    and run_id = 'manual__2025-07-16T19:09:01.888606+00:00'","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.298151Z","level":"info","event":"    and something_else = 'param_from_dag'","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.300822Z","level":"info","event":"test_var: manual__2025-07-16T19:09:01.888606+00:00","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.302633Z","level":"info","event":"data_interval_end: 2025-07-16 19:08:43.748000+00:00","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.304310Z","level":"info","event":"rendered template: run_id: manual__2025-07-16T19:09:01.888606+00:00; params.other_param: from_dag","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.459597Z","level":"info","event":"context: {'dag': <DAG: tutorial_taskflow_templates>, 'inlets': [], 'map_index_template': None, 'outlets': [], 'run_id': 'manual__2025-07-16T19:09:01.888606+00:00', 'task': <Task(_PythonDecoratedOperator): template_test>, 'task_instance': RuntimeTaskInstance(id=UUID('019814a3-e603-7da6-943a-c0767bb10bac'), task_id='template_test', dag_id='tutorial_taskflow_templates', run_id='manual__2025-07-16T19:09:01.888606+00:00', try_number=1, map_index=-1, hostname='943521ccedc6', context_carrier={}, task=<Task(_PythonDecoratedOperator): template_test>, bundle_instance=LocalDagBundle(name=example_dags), max_tries=0, start_date=datetime.datetime(2025, 7, 16, 19, 9, 9, 262092, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None), 'ti': RuntimeTaskInstance(id=UUID('019814a3-e603-7da6-943a-c0767bb10bac'), task_id='template_test', dag_id='tutorial_taskflow_templates', run_id='manual__2025-07-16T19:09:01.888606+00:00', try_number=1, map_index=-1, hostname='943521ccedc6', context_carrier={}, task=<Task(_PythonDecoratedOperator): template_test>, bundle_instance=LocalDagBundle(name=example_dags), max_tries=0, start_date=datetime.datetime(2025, 7, 16, 19, 9, 9, 262092, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None), 'outlet_events': <airflow.sdk.execution_time.context.OutletEventAccessors object at 0x7f282663d040>, 'inlet_events': InletEventsAccessors(_inlets=[], _assets={}, _asset_aliases={}), 'macros': <MacrosAccessor (dynamic access to macros)>, 'params': {'foobar': 'param_from_dag', 'other_param': 'from_dag'}, 'var': {'json': <VariableAccessor (dynamic access)>, 'value': <VariableAccessor (dynamic access)>}, 'conn': <ConnectionAccessor (dynamic access)>, 'dag_run': DagRun(dag_id='tutorial_taskflow_templates', run_id='manual__2025-07-16T19:09:01.888606+00:00', logical_date=datetime.datetime(2025, 7, 16, 19, 8, 43, 748000, tzinfo=TzInfo(UTC)), data_interval_start=datetime.datetime(2025, 7, 16, 19, 8, 43, 748000, tzinfo=TzInfo(UTC)), data_interval_end=datetime.datetime(2025, 7, 16, 19, 8, 43, 748000, tzinfo=TzInfo(UTC)), run_after=datetime.datetime(2025, 7, 16, 19, 8, 43, 748000, tzinfo=TzInfo(UTC)), start_date=datetime.datetime(2025, 7, 16, 19, 9, 2, 844634, tzinfo=TzInfo(UTC)), end_date=None, clear_number=0, run_type=<DagRunType.MANUAL: 'manual'>, conf={'foobar': 'param_from_dag', 'other_param': 'from_dag'}, consumed_asset_events=[]), 'triggering_asset_events': TriggeringAssetEventsAccessor(_events=defaultdict(<class 'list'>, {})), 'task_instance_key_str': 'tutorial_taskflow_templates__template_test__20250716', 'task_reschedule_count': 0, 'prev_start_date_success': <Proxy at 0x7f28257c3b30 with factory <function RuntimeTaskInstance.get_template_context.<locals>.<lambda> at 0x7f282123a020>>, 'prev_end_date_success': <Proxy at 0x7f2826104a10 with factory <function RuntimeTaskInstance.get_template_context.<locals>.<lambda> at 0x7f2821299d00>>, 'logical_date': DateTime(2025, 7, 16, 19, 8, 43, 748000, tzinfo=Timezone('UTC')), 'ds': '2025-07-16', 'ds_nodash': '20250716', 'ts': '2025-07-16T19:08:43.748000+00:00', 'ts_nodash': '20250716T190843', 'ts_nodash_with_tz': '20250716T190843.748000+0000', 'data_interval_end': DateTime(2025, 7, 16, 19, 8, 43, 748000, tzinfo=Timezone('UTC')), 'data_interval_start': DateTime(2025, 7, 16, 19, 8, 43, 748000, tzinfo=Timezone('UTC')), 'prev_data_interval_start_success': <Proxy at 0x7f28257c4f20 with factory <function RuntimeTaskInstance.get_template_context.<locals>.<lambda> at 0x7f2821299da0>>, 'prev_data_interval_end_success': <Proxy at 0x7f28257c4f80 with factory <function RuntimeTaskInstance.get_template_context.<locals>.<lambda> at 0x7f2821299ee0>>, 'sql': '/*\\n Licensed to the Apache Software Foundation (ASF) under one\\n or more contributor license agreements.  See the NOTICE file\\n distributed with this work for additional information\\n regarding copyright ownership.  The ASF licenses this file\\n to you under the Apache License, Version 2.0 (the\\n \"License\"); you may not use this file except in compliance\\n with the License.  You may obtain a copy of the License at\\n\\n   http://www.apache.org/licenses/LICENSE-2.0\\n\\n Unless required by applicable law or agreed to in writing,\\n software distributed under the License is distributed on an\\n \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n KIND, either express or implied.  See the License for the\\n specific language governing permissions and limitations\\n under the License.\\n*/\\n\\nselect * from test_data\\nwhere 1=1\\n    and run_id = \\'manual__2025-07-16T19:09:01.888606+00:00\\'\\n    and something_else = \\'param_from_dag\\'', 'test_var': 'manual__2025-07-16T19:09:01.888606+00:00', 'templates_dict': None}","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.462141Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.463626Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:29.464806Z","level":"info","event":"Task operator:<Task(_PythonDecoratedOperator): template_test>","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-16T19:09:25.908442","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.decorators.python._PythonDecoratedOperator"}
